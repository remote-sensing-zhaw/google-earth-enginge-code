[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cloud Computing with Google Earth Engine",
    "section": "",
    "text": "Introduction\nThese notes are intended to accompany the the Digital Life Sience Data Lab course. Nils will work with you through these examples in a workshop format. This means he will live code and you will accompany him. We specifically do not want to give you these codes up front, since writing your own code and making mistakes is the best way to learn.\nThis also means that the code you write is part of your learning experience and you should keep it for your own reference. To set this up, proceed as follows:\nInstructions for Nils:"
  },
  {
    "objectID": "index.html#preperation",
    "href": "index.html#preperation",
    "title": "Cloud Computing with Google Earth Engine",
    "section": "Preperation",
    "text": "Preperation\nPlease make sure you have registered for a GoogleEarthEngine Account. See the slides here for instructions."
  },
  {
    "objectID": "00-SRTM.html#setting-up",
    "href": "00-SRTM.html#setting-up",
    "title": "1  Demo 1: Unispectral Data",
    "section": "1.1 Setting up",
    "text": "1.1 Setting up\n\nUse the same search bar to look for “Digital Elevation” data. We will use the SRTM data.\nExplore the metadata of SRTM\nImport via the Collection Snippet-button\n\nSave in a variable and add ;\nExecute with Ctrl Alt + Enter\n\n\nvar srtm = ee.Image(\"USGS/SRTMGL1_003\");"
  },
  {
    "objectID": "00-SRTM.html#console.log-and-print",
    "href": "00-SRTM.html#console.log-and-print",
    "title": "1  Demo 1: Unispectral Data",
    "section": "1.2 console.log() and print()",
    "text": "1.2 console.log() and print()\n\nNothing happens.\nTo get metadata of the data (similar to R str() function):\n\nconsole.log(srtm);\n\nIn the GEE environment, print() is the same as console.log()\nThis is not the case outside GEE!\n\nprint(srtm);"
  },
  {
    "objectID": "00-SRTM.html#create-a-map",
    "href": "00-SRTM.html#create-a-map",
    "title": "1  Demo 1: Unispectral Data",
    "section": "1.3 Create a map",
    "text": "1.3 Create a map\nAdd the data to the map\nMap.addLayer(srtm)\n\nThe result does not show much. Why?\nThe color scheme “white to black” is streched across the whole range of values.\nVisp, however steep it is there, does not cover this whole range."
  },
  {
    "objectID": "00-SRTM.html#consult-docs-to-change-the-viz-params",
    "href": "00-SRTM.html#consult-docs-to-change-the-viz-params",
    "title": "1  Demo 1: Unispectral Data",
    "section": "1.4 Consult docs to change the viz params",
    "text": "1.4 Consult docs to change the viz params\n\nTruncate using the GUI interface (e.g. from 0 to 4000).\nIn the docs for Map.addLayer() see the reference:\n\nFor Images and ImageCollection, see ee.data.getMapId for valid parameters\n\nLook for ee.data.getMapId in the docs and note the following reference:\n\nThe visualization parameters as a (client-side) JavaScript object. …\n\nmin (comma-separated numbers) Value (or one per band) to map onto 00.\nmax (comma-separated numbers) Value (or one per band) to map onto FF.\n\n\n\nvisParam = {min: 0, max: 4000}\nMap.addLayer(srtm, visParam)"
  },
  {
    "objectID": "00-SRTM.html#add-a-color-palette",
    "href": "00-SRTM.html#add-a-color-palette",
    "title": "1  Demo 1: Unispectral Data",
    "section": "1.5 Add a color palette",
    "text": "1.5 Add a color palette\nAdd a color palette, and maybe to the whole thing in one line:\nMap.addLayer(srtm, {min: 0, max: 4000, palette: [\"green\", \"red\", \"blue\"]})"
  },
  {
    "objectID": "01-Sentinel-RBG.html",
    "href": "01-Sentinel-RBG.html",
    "title": "2  Demo 2: Multispectral Data",
    "section": "",
    "text": "Exploring Multispectral Data\n\nIn this exercise, we will explore a more complex, multispectral dataset.\nThis adds complexity since there are not only multiple bands, but there also is a temporal dimension and issues with cloud cover etc\n\nLets get started!\n\nLook for Sentinel-2 Data, browse the collections\nAdd the dataset * Harmonized Sentinel-2 MSI: MultiSpectral Instrument, Level-2A*\n\nvar s2 = ee.ImageCollection(\"COPERNICUS/S2_SR_HARMONIZED\");\n\nEven the first step shows us, that this is a more complex dataset.\nPrinting the collection fails:\n\nprint(s2);\n\nin the docs, look for ways to filter the dataset, e.g. by date\nuse the function filterDate() which can be found under ee.ImageCollection\nApply the filter:\n\nPlay around with some recent dates (2 - 3 days)\nZoom out\nand add the result to the map.\nThis nicely shows the path of the Sentiel-2 satellite\n\n\nvar filtered = s2.filterDate(\"2023-10-01\", \"2023-10-03\");\n\nMap.addLayer(filtered);\n\nPrinting to the console is still not possible.\nHow many images are in the collection?\n\nprint(filtered.size())\n\nZoom back to a region of interest, e.g. Visp\nThe image does not look good\nCheck the Docs for ee.ImageCollection and as before, it references ee.data.getMapId(). There, note the following line:\n\nbands (comma-separated strings) Comma-delimited list of band names to be mapped to RGB.\n\nRead the Metadata of the dataset, check the Tab “Bands”. Note the Band names and their description: RGB is “B4, B3, B2”.\n\nMap.addLayer(filtered, {\"bands\":[\"B4\",\"B3\",\"B2\"]});\n\nstill not looking good. Using the map UI, use the layer setting to strech the image to 98% and raise the gamma to about 4. You will learn more about these values in the Remote Sensing Course (FS24)\nimport these setting into the script via the Import-Button\n\nNote the imageVisParam object and how it is part of the code, but not quite. You can copy the code and create your own object from it, if you are so inclined.\nYou can now replace the JavaScript object with the imageVisParam object\n\n\n// was created automagically:\nvar imageVisParam = {\"opacity\":1,\"bands\":[\"B4\",\"B3\",\"B2\"],\"min\":85.84,\"max\":4206.16,\"gamma\":3.055};\n\n// can be used in the addLayer-function:\nMap.addLayer(filtered, imageVisParam);"
  },
  {
    "objectID": "02-Sentinel_NDVI.html#setup",
    "href": "02-Sentinel_NDVI.html#setup",
    "title": "3  Demo 3: Multispec NDVI",
    "section": "3.1 Setup",
    "text": "3.1 Setup\n\nWe will work with the same data from Demo 2\nWe can overwrite s2 so we do not have too many variables\n\nvar imageVisParam = {\"opacity\":1,\"bands\":[\"B4\",\"B3\",\"B2\"],\"min\":85.84,\"max\":4206.16,\"gamma\":3.055}\n\nvar s2 = ee.ImageCollection(\"COPERNICUS/S2_SR_HARMONIZED\");\n\ns2 = s2.filterDate(\"2023-10-01\", \"2023-10-03\");\n\nMap.addLayer(s2, imageVisParam);"
  },
  {
    "objectID": "02-Sentinel_NDVI.html#specify-an-area-of-interest-aoi",
    "href": "02-Sentinel_NDVI.html#specify-an-area-of-interest-aoi",
    "title": "3  Demo 3: Multispec NDVI",
    "section": "3.2 Specify an area of interest (aoi)",
    "text": "3.2 Specify an area of interest (aoi)\n\nAs we saw in the last demo, we have several images in the collection.\nHowever, we are interested only in a single image, maybe an aggregate\nTo select a single image, we need to filter by location.\nTo do this, use the map UI and create a point in Visp, name it “aoi”\n\nNote how the points are immediately added in the code editor\nIf a mistake was made, either delete and redraw, or copy the code, delete the import statement and add it manually\n\n\n// this was created automagically\naoi = ee.Geometry.Point([7.880419288840592, 46.29770703906289]);\n\n// and can be added to the Map like so:\nMap.addLayer(aoi);"
  },
  {
    "objectID": "02-Sentinel_NDVI.html#filter-by-the-aoi",
    "href": "02-Sentinel_NDVI.html#filter-by-the-aoi",
    "title": "3  Demo 3: Multispec NDVI",
    "section": "3.3 Filter by the aoi",
    "text": "3.3 Filter by the aoi\n\nusing the search function in Docs, look for various filter functions\nWe will need the function filerBounds()\nApply the filter, but out of intereste check the size of the collection before and after filtering\n\n// the original filter coincidently shows just one image \n// for the filtered Date and AOI. Try changing the dates \n// so that multiple images \n\n//var s2 = s2.filterDate(\"2023-10-01\", \"2023-10-03\");\nvar s2 = s2.filterDate(\"2023-09-01\", \"2023-10-03\");\n\n\nconsole.log(s2.size())\n\ns2 = s2.filterBounds(aoi);\n\nconsole.log(s2.size())\nconsole.log(s2);"
  },
  {
    "objectID": "02-Sentinel_NDVI.html#inspect-the-output",
    "href": "02-Sentinel_NDVI.html#inspect-the-output",
    "title": "3  Demo 3: Multispec NDVI",
    "section": "3.4 Inspect the output",
    "text": "3.4 Inspect the output\n\nCheck the output of console.log(s2).\nWe wanted a single image, but still have an image collection with multiple values.\nWe might want to choose the best image (we will do so later on)\nbut for now let’s keep it simple and just take the first with the first() method\n\ns2 = s2.first()\n\nprint(s2)"
  },
  {
    "objectID": "02-Sentinel_NDVI.html#calculate-ndvi",
    "href": "02-Sentinel_NDVI.html#calculate-ndvi",
    "title": "3  Demo 3: Multispec NDVI",
    "section": "3.5 Calculate NDVI",
    "text": "3.5 Calculate NDVI\n\nNow, we can use the image to calculate NDVI\n\n\\[ \\text{NDVI} = \\frac{\\text{NIR}- \\text{Red}}{\\text{NIR}+\\text{Red}} \\]\nvar nir = s2.select(\"B8\")\nvar red = s2.select(\"B4\")\nvar zaehler = nir.subtract(red);\nvar nenner = nir.add(red);\nvar ndvi = zaehler.divide(nenner);"
  },
  {
    "objectID": "02-Sentinel_NDVI.html#visualize-the-output",
    "href": "02-Sentinel_NDVI.html#visualize-the-output",
    "title": "3  Demo 3: Multispec NDVI",
    "section": "3.6 Visualize the output",
    "text": "3.6 Visualize the output\nAdd the output to the map:\nMap.addLayer(ndvi);"
  },
  {
    "objectID": "02-Sentinel_NDVI.html#adjust-range-and-palette",
    "href": "02-Sentinel_NDVI.html#adjust-range-and-palette",
    "title": "3  Demo 3: Multispec NDVI",
    "section": "3.7 Adjust range and palette",
    "text": "3.7 Adjust range and palette\n\nVia the GUI\n\nAdjust the value range to -1 - 1\nAdd a palettte by adding the colors red, yellow and green. These will automatically be mapped to the specified value rage.\n\nImport the visParams from the GUI to the code editor\n\nimageVisParam2 = {\"opacity\":1,\"bands\":[\"B8\"],\"min\":-1,\"palette\":[\"ff0000\",\"ffff00\",\"008000\"]};\n\nMap.addLayer(ndvi, imageVisParam2);"
  },
  {
    "objectID": "02-Sentinel_NDVI.html#normalized-difference-function-skip-this-doesnt-work",
    "href": "02-Sentinel_NDVI.html#normalized-difference-function-skip-this-doesnt-work",
    "title": "3  Demo 3: Multispec NDVI",
    "section": "3.8 Normalized Difference Function (skip this, doesn’t work)",
    "text": "3.8 Normalized Difference Function (skip this, doesn’t work)\n\nAlternatively, you can use the Normalized Difference function\nThe function “normalizedDifference” is a generic function to calculcate normalized difference between two bands\nThis doesn’t seem to work?\n\nvar ndvi = s2.normalizedDifference([\"B8\", \"B4\"]);"
  },
  {
    "objectID": "02-Sentinel_NDVI.html#custom-ndvi-function",
    "href": "02-Sentinel_NDVI.html#custom-ndvi-function",
    "title": "3  Demo 3: Multispec NDVI",
    "section": "3.9 Custom NDVI function",
    "text": "3.9 Custom NDVI function\n\nWe could also create a custom ndvi()-function that takes the bands 8 and 4\nWe can only apply this function to the Sentinel-2 data, where the Band numbers 8 and 4 correspond to NIR and Red.\n\nfunction ndvi_fun(image){\n  var nir = image.select(\"B8\");\n  var red = image.select(\"B4\");\n  var zaehler = nir.subtract(red);\n  var nenner = nir.add(red);\n  var ndvi = zaehler.divide(nenner);\n  return ndvi\n}\n\nvar ndvi = ndvi_fun(s2)\n\nMap.addLayer(ndvi, imageVisParam2);"
  },
  {
    "objectID": "03-Sentinel-NDVI-over-time.html#prepare",
    "href": "03-Sentinel-NDVI-over-time.html#prepare",
    "title": "4  Demo 4: NDVI over time",
    "section": "4.1 Prepare",
    "text": "4.1 Prepare\n\nIn this exercise, we will calculate NDVI values over time.\nstarting with the sentinel-2 image from the last example\nRemove everything but the following lines:\n\n// just keep the import statements ↓\nvar imageVisParam = {\"opacity\":1,\"bands\":[\"B4\",\"B3\",\"B2\"],\"min\":85.84,\"max\":4206.16,\"gamma\":3.055};\naoi = ee.Geometry.Point([7.880419288840592, 46.29770703906289]);\n\nimageVisParam2 = {\"opacity\":1,\"bands\":[\"B8\"],\"min\":-1,\"palette\":[\"ff0000\",\"ffff00\",\"008000\"]};\n// just keep the import statements ↑\n\n// move the function statemement up\nfunction ndvi_fun(image){\n  var nir = image.select(\"B8\");\n  var red = image.select(\"B4\");\n  var zaehler = nir.subtract(red);\n  var nenner = nir.add(red);\n  var ndvi = zaehler.divide(nenner);\n  return ndvi\n}\n\n// filter the image collection by date and location\nvar s2 = ee.ImageCollection(\"COPERNICUS/S2_SR_HARMONIZED\");\ns2 = s2.filterDate(\"2023-09-01\", \"2023-10-03\");\ns2 = s2.filterBounds(aoi);\ns2 = s2.first()\n\nvar ndvi = ndvi_fun(s2)\n\n\nMap.addLayer(ndvi, imageVisParam2);"
  },
  {
    "objectID": "03-Sentinel-NDVI-over-time.html#replace-point-with-polygon",
    "href": "03-Sentinel-NDVI-over-time.html#replace-point-with-polygon",
    "title": "4  Demo 4: NDVI over time",
    "section": "4.2 Replace Point with Polygon",
    "text": "4.2 Replace Point with Polygon\n\nDelete the aoi-Point and replace it with a Polygon of the same name\nDraw a polygon from about Lalden (North-East) to Zeneggen (South-West)\nRerun the code, the output should be similar"
  },
  {
    "objectID": "03-Sentinel-NDVI-over-time.html#apply-the-function-to-the-whole-image-collection",
    "href": "03-Sentinel-NDVI-over-time.html#apply-the-function-to-the-whole-image-collection",
    "title": "4  Demo 4: NDVI over time",
    "section": "4.3 Apply the function to the whole image collection",
    "text": "4.3 Apply the function to the whole image collection\n\nNow, we want to apply our ndvi_fun() to the whole image collection.\nRemove lines\n\ns2 = s2.first()\nvar ndvi = ndvi_fun(s2)\n\nWe can use .map() for this. Add the following line:\n\nvar ndvi = s2.map(ndvi_fun);\n\nprint(ndvi);"
  },
  {
    "objectID": "03-Sentinel-NDVI-over-time.html#visualize-the-output",
    "href": "03-Sentinel-NDVI-over-time.html#visualize-the-output",
    "title": "4  Demo 4: NDVI over time",
    "section": "4.4 Visualize the output",
    "text": "4.4 Visualize the output\n\nNow we want to create a chart of the ndvi values over time\nsearch through the docs for chart.\nconsult the docs “ui.Chart.image.series” first\nTry the following\n\nprint(ui.Chart.image.series(ndvi, aoi));"
  },
  {
    "objectID": "03-Sentinel-NDVI-over-time.html#debugging-the-chart",
    "href": "03-Sentinel-NDVI-over-time.html#debugging-the-chart",
    "title": "4  Demo 4: NDVI over time",
    "section": "4.5 Debugging the chart",
    "text": "4.5 Debugging the chart\nThis will throw an error:\n\n\n\n\n\n\nError\n\n\n\nNo features contain non-null values of \"system:time_start\""
  },
  {
    "objectID": "03-Sentinel-NDVI-over-time.html#compare-the-two-objects",
    "href": "03-Sentinel-NDVI-over-time.html#compare-the-two-objects",
    "title": "4  Demo 4: NDVI over time",
    "section": "4.6 Compare the two objects",
    "text": "4.6 Compare the two objects\nCompare the to objects, s2 and ndvi. Much metadata was lost when we mapped the function over the collection.\n\n\n\n\n\n\ns2 looks as follows:\n\n\n\n\n\nfeatures: List (218 elements)\n  0:  Image COPERNICUS/S2_SR_HARMONIZED/20230101T102339_20230101T102333_T32TLS (23 bands)\n    type: Image\n    id: COPERNICUS/S2_SR_HARMONIZED/20230101T102339_20230101T102333_T32TLS\n    version: 1696354178264204\n    bands: List (23 elements)\n    properties: Object (101 properties)  # ← lots of metadata\n      AOT_RETRIEVAL_ACCURACY: 0\n      AOT_RETRIEVAL_METHOD: CAMS\n      ....\n      system:time_end: 1672568887220\n      system:time_start: 1672568887220\n\n\n\n\n\n\n\n\n\nndvi looks as follows:\n\n\n\n\n\nfeatures: List (218 elements)\n  0: Image (1 band)\n    type: Image\n    bands: List (1 element)\n    properties: Object (1 property)        # ← no metadata\n      system:index: 20230101T102339_20230"
  },
  {
    "objectID": "03-Sentinel-NDVI-over-time.html#add-output-as-new-image",
    "href": "03-Sentinel-NDVI-over-time.html#add-output-as-new-image",
    "title": "4  Demo 4: NDVI over time",
    "section": "4.7 Add output as new image",
    "text": "4.7 Add output as new image\nInstead of generating a new image, we can simply add the output to the original image collection:\n\nfunction ndvi_fun(image){\n  var nir = image.select(\"B8\");\n  var red = image.select(\"B4\");\n  var zaehler = nir.subtract(red);\n  var nenner = nir.add(red);\n  var ndvi = zaehler.divide(nenner);\n- return ndvi\n+ ndvi = ndvi.rename(\"ndvi\")\n+ return image.addBands(ndvi)\n}"
  },
  {
    "objectID": "03-Sentinel-NDVI-over-time.html#run-analysis-on-the-entire-year",
    "href": "03-Sentinel-NDVI-over-time.html#run-analysis-on-the-entire-year",
    "title": "4  Demo 4: NDVI over time",
    "section": "4.8 Run analysis on the entire year",
    "text": "4.8 Run analysis on the entire year\n\nNow, extend the date range to the entire year\nNote how the ndvi values change over time, but have irregularities?"
  },
  {
    "objectID": "03-Sentinel-NDVI-over-time.html#debugging-the-chart-again",
    "href": "03-Sentinel-NDVI-over-time.html#debugging-the-chart-again",
    "title": "4  Demo 4: NDVI over time",
    "section": "4.9 Debugging the chart again",
    "text": "4.9 Debugging the chart again\n\nDetermine the date of such an image by hovering over the chart\nin my chart, 2023-06-10 is such a date\n\n// filter by that date (these can result more than one image, but no matter)\nvar fil = s2.filterDate(\"2023-06-10\",\"2023-06-11\")\n\n// add the filtered image to the map. Apply the visualization parameters\nMap.addLayer(fil)"
  },
  {
    "objectID": "03-Sentinel-NDVI-over-time.html#filtering-by-cloud-cover",
    "href": "03-Sentinel-NDVI-over-time.html#filtering-by-cloud-cover",
    "title": "4  Demo 4: NDVI over time",
    "section": "4.10 Filtering by cloud cover",
    "text": "4.10 Filtering by cloud cover\nThis shows the issue: clouds!\n\n\nCheck the metadata of the image.\nIn the properties, there is a field CLOUDY_PIXEL_PERCENTAGE.\nin the docs, look for Filters\nee.Filter.metadata(name, operator, value) is depricated, use ee.Filter.lt() instead\n\ns2 = s2.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20));"
  },
  {
    "objectID": "03-Sentinel-NDVI-over-time.html#export-the-data",
    "href": "03-Sentinel-NDVI-over-time.html#export-the-data",
    "title": "4  Demo 4: NDVI over time",
    "section": "4.11 Export the data",
    "text": "4.11 Export the data\nNow you can export the output as csv, svg or png"
  },
  {
    "objectID": "04-Forest-Cover-Change.html#preperation",
    "href": "04-Forest-Cover-Change.html#preperation",
    "title": "5  Demo 5: Forest regrowth",
    "section": "5.1 Preperation",
    "text": "5.1 Preperation\n\nget dataset “Hansen Global Forest Change v1.9 (2000-2021)”\nprint() it to the console, explore the bands and properties\n\nvar hansen = ee.Image(\"UMD/hansen/global_forest_change_2020_v1_8\")\n\nprint(hansen)"
  },
  {
    "objectID": "04-Forest-Cover-Change.html#visualize-the-fire-lossyear",
    "href": "04-Forest-Cover-Change.html#visualize-the-fire-lossyear",
    "title": "5  Demo 5: Forest regrowth",
    "section": "5.2 Visualize the fire (lossyear)",
    "text": "5.2 Visualize the fire (lossyear)\n\nvisualize the forst fire loss year\n\nvar lossyear = hansen.select(\"lossyear\")\nMap.addLayer(lossyear, {}, \"Year of Loss\");"
  },
  {
    "objectID": "04-Forest-Cover-Change.html#highlight-the-fire-in-2003",
    "href": "04-Forest-Cover-Change.html#highlight-the-fire-in-2003",
    "title": "5  Demo 5: Forest regrowth",
    "section": "5.3 Highlight the fire in 2003",
    "text": "5.3 Highlight the fire in 2003\n\nalbeit the fire was in 2003, the loss year is recorded 2004\nreclassify to 2004 to 1 (all other to nodata) to see the fire in 2004\n\nvar loss2004 = hansen.select(\"lossyear\").remap([4], [1])\nMap.addLayer(loss2004, {}, \"Loss 2004\");"
  },
  {
    "objectID": "04-Forest-Cover-Change.html#determin-the-area-of-interest",
    "href": "04-Forest-Cover-Change.html#determin-the-area-of-interest",
    "title": "5  Demo 5: Forest regrowth",
    "section": "5.4 Determin the area of interest",
    "text": "5.4 Determin the area of interest\n\ndraw a square or a polygon around the forest fire in Leuk\nrename it to aoi"
  },
  {
    "objectID": "04-Forest-Cover-Change.html#get-tree-canopy-cover-over-time",
    "href": "04-Forest-Cover-Change.html#get-tree-canopy-cover-over-time",
    "title": "5  Demo 5: Forest regrowth",
    "section": "5.5 Get Tree Canopy Cover over time",
    "text": "5.5 Get Tree Canopy Cover over time\n\nget dataset “Global Forest Cover Change (GFCC) Tree Cover Multi-Year Global 30m”\n\nvar gfcc = ee.ImageCollection(\"NASA/MEASURES/GFCC/TC/v3\")\n\n// printing fails\nprint(gfcc)"
  },
  {
    "objectID": "04-Forest-Cover-Change.html#select-the-band-tree_canopy_cover",
    "href": "04-Forest-Cover-Change.html#select-the-band-tree_canopy_cover",
    "title": "5  Demo 5: Forest regrowth",
    "section": "5.6 Select the band tree_canopy_cover",
    "text": "5.6 Select the band tree_canopy_cover\n// chaining!\nvar gfcc = ee.ImageCollection(\"NASA/MEASURES/GFCC/TC/v3\")\n  .select(\"tree_canopy_cover\")\n\nprint(gfcc)"
  },
  {
    "objectID": "04-Forest-Cover-Change.html#filter-by-aoi",
    "href": "04-Forest-Cover-Change.html#filter-by-aoi",
    "title": "5  Demo 5: Forest regrowth",
    "section": "5.7 Filter by aoi",
    "text": "5.7 Filter by aoi\n// chaining!\nvar gfcc = ee.ImageCollection(\"NASA/MEASURES/GFCC/TC/v3\")\n  .select(\"tree_canopy_cover\")\n  .filterBounds(aoi)\n\nprint(gfcc.size())\nprint(gfcc)"
  },
  {
    "objectID": "04-Forest-Cover-Change.html#get-the-date-of-the-first-and-last-dataset",
    "href": "04-Forest-Cover-Change.html#get-the-date-of-the-first-and-last-dataset",
    "title": "5  Demo 5: Forest regrowth",
    "section": "5.8 Get the date of the first and last dataset",
    "text": "5.8 Get the date of the first and last dataset\n\nwrite this down from inside out\n\nvar first_date = ee.Date(gfcc.first().get(\"system:time_start\"))\nvar last_date = ee.Date(gfcc.sort(\"system:time_start\", false).first().get(\"system:time_start\"))\n\nprint(\"from\", first_date, \"to\", last_date)"
  },
  {
    "objectID": "04-Forest-Cover-Change.html#compare-the-values-for-2000-and-2015",
    "href": "04-Forest-Cover-Change.html#compare-the-values-for-2000-and-2015",
    "title": "5  Demo 5: Forest regrowth",
    "section": "5.9 Compare the values for 2000 and 2015",
    "text": "5.9 Compare the values for 2000 and 2015\n\nwe can’t use .first() with sort() here, because the very first image does not seem to really intersect with the AOI\n\nvar treeCanopy2000 = ee.Image(treeCanopyCover.filterDate('2000-01-01', '2000-01-02').min());\nMap.addLayer(treeCanopy2000);"
  },
  {
    "objectID": "04-Forest-Cover-Change.html#draw-aoi-outine",
    "href": "04-Forest-Cover-Change.html#draw-aoi-outine",
    "title": "5  Demo 5: Forest regrowth",
    "section": "5.10 Draw aoi outine",
    "text": "5.10 Draw aoi outine\n\nLook for fillcolor in the docs\nnotice that these can only be applied to FeatureCollections\nread up on ee.FeatureCollection\nnotice that you can create a FeatureCollection from a Geometry\ndo this, and then style the aoi_fc using fillColor: \"00000000\"\n\nvar aoi_fc = ee.FeatureCollection(aoi)\nMap.addLayer(aoi_fc, {fillColor: \"00000000\"}, \"aoi\");"
  },
  {
    "objectID": "04-Forest-Cover-Change.html#work-on-map",
    "href": "04-Forest-Cover-Change.html#work-on-map",
    "title": "5  Demo 5: Forest regrowth",
    "section": "5.11 Work on Map",
    "text": "5.11 Work on Map\n\nAdd color ramp (e.g. gray to green), transparency and strech the values 0 - 100\nMaybe highlight https://colorbrewer2.org\n\nMap.addLayer(treeCanopy2000, imageVisParam, \"2000\");"
  },
  {
    "objectID": "04-Forest-Cover-Change.html#repeat-for-2015",
    "href": "04-Forest-Cover-Change.html#repeat-for-2015",
    "title": "5  Demo 5: Forest regrowth",
    "section": "5.12 Repeat for 2015",
    "text": "5.12 Repeat for 2015\nvar treeCanopy2015 = ee.Image(treeCanopyCover.filterDate('2015-01-01', '2015-01-02').min());\nMap.addLayer(treeCanopy2015, imageVisParam, \"2015\");"
  },
  {
    "objectID": "04-Forest-Cover-Change.html#create-a-chart",
    "href": "04-Forest-Cover-Change.html#create-a-chart",
    "title": "5  Demo 5: Forest regrowth",
    "section": "5.13 Create a chart",
    "text": "5.13 Create a chart\n\nComparing 2000 and 2015 already shows, that the tree canopy cover has not really increased\nLets determin the tree canopy cover over time by creating a chart\n\nprint(ui.Chart.image.series(gfcc, aoi));"
  },
  {
    "objectID": "04-Forest-Cover-Change.html#full-example",
    "href": "04-Forest-Cover-Change.html#full-example",
    "title": "5  Demo 5: Forest regrowth",
    "section": "5.14 Full Example",
    "text": "5.14 Full Example\n\nvar aoi = \n    /* color: #98ff00 */\n    /* shown: false */\n    ee.Geometry.Polygon(\n        [[[7.643917258942992, 46.31961919138104],\n          [7.644603904450804, 46.32199024646279],\n          [7.64769380923596, 46.324598288374254],\n          [7.65318697329846, 46.3260208042863],\n          [7.657306846345335, 46.3281545087973],\n          [7.65868013736096, 46.33171049803083],\n          [7.660740073884398, 46.33550329839251],\n          [7.664516624177367, 46.338347726044226],\n          [7.663829978669554, 46.341192005737106],\n          [7.659710105622679, 46.341192005737106],\n          [7.64769380923596, 46.33692553071325],\n          [7.64220064517346, 46.33123637949057],\n          [7.640827354157835, 46.32625788667534],\n          [7.635677512849242, 46.327206205956394],\n          [7.63396089907971, 46.32388701654679],\n          [7.638080772126585, 46.31985630151306]]]);\n\n\nvar hansen = ee.Image(\"UMD/hansen/global_forest_change_2020_v1_8\")\n\nvar imageVisParam = {\"opacity\":0.5,\"bands\":[\"tree_canopy_cover\"],\"min\":0,\"max\":100,\"palette\":['#f7fcf5','#e5f5e0','#c7e9c0','#a1d99b','#74c476','#41ab5d','#238b45','#006d2c','#00441b']}\n\nvar loss2004 = hansen.select(\"lossyear\").remap([4], [1]);\nvar gfcc = ee.ImageCollection(\"NASA/MEASURES/GFCC/TC/v3\")\n  .filterBounds(aoi)\n  .select(\"tree_canopy_cover\")\n\nvar first_date = ee.Date(gfcc.first().get(\"system:time_start\"))\nvar last_date = ee.Date(gfcc.sort(\"system:time_start\", false).first().get(\"system:time_start\"))\n\nprint(\"from\", first_date, \"to\", last_date, \"total\", gfcc.size())\n\n\nvar treeCanopy2000 = gfcc.filterDate('2000-01-01', '2000-01-02').mean()\nvar treeCanopy2015 = gfcc.filterDate('2015-01-01', '2015-01-02').mean()\n\n\nprint(treeCanopy2000)\n\n\nvar aoi_fc = ee.FeatureCollection(aoi)\n\nMap.addLayer(treeCanopy2000, imageVisParam, \"2000\");\nMap.addLayer(treeCanopy2015, imageVisParam, \"2015\");\n\nprint(ui.Chart.image.series(gfcc, aoi));\n\n\nMap.addLayer(aoi_fc.style({fillColor: \"00000000\"}));"
  },
  {
    "objectID": "05-Classification-walkthrough.html",
    "href": "05-Classification-walkthrough.html",
    "title": "6  Landuse classification",
    "section": "",
    "text": "This walkthrough is prepared specially for a stand alone demonstration\n\nlook for Sentinel-2 MSI: MultiSpectral Instrument, Level-2A\n\nvar sentinel = ee.ImageCollection(\"COPERNICUS/S2_SR\");\n\n// try printing, will abort (&gt;5000 elements)\nprint(sentinel);\nturn import statement into a formatted import statment and check docs. there is an example of filtering by date, use this example and adapt to the date range below\nvar s2_filtered = s2.filterDate(“2020-05-01”, “2020-06-30”) try adding to the map\nMap.addLayer(filtered);\nnot looking good. Check docs again, use band information to make an rgb image\nMap.addLayer(s2_filtered, {“bands”:[“B4”,“B3”,“B2”]});\nstill not looking good. Using the map UI, use the layer setting to strech the image to 98% and raise the gamma to about 4. These settings can now be imported into the script via the import button\nlook at all the clouds! We want images with a low cloud coverage in our area of interest. Draw an area of interest using the “draw square” tool and import as a polygon named AOI\nvar aoi = ee.Geometry.Polygon( [[[7.986557722409096, 47.565286694437866], [7.986557722409096, 46.845042087063305], [9.398300886471596, 46.845042087063305], [9.398300886471596, 47.565286694437866]]], null, false)\nuse this polygon to filter the s2 data further. Print the intermediate results of the statement below\nvar s2_filtered = s2.filterDate(“2020-05-01”, “2020-06-30”) .filterBounds(aoi) .filter(ee.Filter.lt(“CLOUDY_PIXEL_PERCENTAGE”,20)) .median()\n// create a dataset of points with the same land cover class with the “point” tool. // repeat for other land cover classes. Turn the import statement to “FeatureCollection” and // merge the datasets using the following method:\nvar training = urban.merge(rural).merge(forest).merge(water);\nprint the data and show that no feature label is passed on to “training” Add this info by adding a column “landcover” with a numeric value discriminating the 4 lccs\nextract the values from the different bands by using “sampleRegions”\nvar sampled = s2_filtered.select([“B4”, “B3”, “B2”]).sampleRegions({ collection: training, properties: [“landcover”], scale: 30 })\ncreate a classifier with either of these functions. Whats a “good” number of trees for Random Forest?\nvar classifier = ee.Classifier.smileCart().train({features: sampled, classProperty: “landcover”}) var classifier = ee.Classifier.smileNaiveBayes().train({features: sampled, classProperty: “landcover”}) var classifier = ee.Classifier.smileRandomForest(10).train({features: sampled, classProperty: “landcover”})\nclassify the filtered s2 dataset with the classifier. Since we have to specify our bands again, create a variable for this\nvar bands = [“B4”, “B3”, “B2”] var classified = s2_filtered.select(bands).classify(classifier)\nadd classified dataset to map. “map” the different lcc to different colours, e.g.: Map.addLayer(classified,{min: 1, max: 4, palette: [“darkgreen”, “lightgreen”, “gray”, “blue”]})"
  },
  {
    "objectID": "05-Classification-working-ex.html",
    "href": "05-Classification-working-ex.html",
    "title": "7  Landuse classification",
    "section": "",
    "text": "/**** Start of imports. If edited, may not auto-convert in the playground. ****/\nvar forest = /* color: #d63000 */ee.FeatureCollection(\n        [ee.Feature(\n            ee.Geometry.Point([8.350015483965016, 47.28646393826113]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"0\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.333879314531423, 47.289083854911794]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"1\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.307529293169118, 47.287453699803265]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"2\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.306156002153493, 47.281747761270005]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"3\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.303409420122243, 47.28134017068095]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"4\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.321605526079274, 47.28291228850732]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"5\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.317914806474782, 47.281107260363044]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"6\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.314567409624196, 47.27953508889775]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"7\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.35241874324236, 47.28535771226799]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"8\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.34692557917986, 47.2932754516345]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"9\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.343320690263845, 47.292693305288694]),\n            {\n              \"landcover\": 1,\n              \"system:index\": \"10\"\n            })]),\n    rural = /* color: #98ff00 */ee.FeatureCollection(\n        [ee.Feature(\n            ee.Geometry.Point([8.316369854082204, 47.28564882661438]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"0\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.319888912309743, 47.28937494875145]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"1\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.32169135676775, 47.29030643827234]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"2\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.326068721880056, 47.29013178523681]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"3\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.326927028764821, 47.28966604098902]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"4\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.328042827715016, 47.289083854911794]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"5\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.334651790727712, 47.2790110213609]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"6\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.332763515581227, 47.278428718009664]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"7\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.314824901689626, 47.27534240325761]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"8\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.313880764116384, 47.27400300310907]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"9\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.368383251299, 47.285590603873295]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"10\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.366494976152516, 47.28425146314057]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"11\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.376279674638845, 47.287337258230146]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"12\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.378425441850759, 47.291587209576875]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"13\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.376279674638845, 47.2902482206579]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"14\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.373189769853688, 47.29123791138798]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"15\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.370786510576345, 47.290888610892104]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"16\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.369584880937673, 47.29211115253461]),\n            {\n              \"landcover\": 2,\n              \"system:index\": \"17\"\n            })]),\n    urban = /* color: #0b4a8b */ee.FeatureCollection(\n        [ee.Feature(\n            ee.Geometry.Point([8.339715801347829, 47.271324101107474]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"0\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.332591854204274, 47.273478880779095]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"1\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.335424266924, 47.274992997791564]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"2\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.333879314531423, 47.27126586260141]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"3\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.34366401301775, 47.26847033894456]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"4\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.340659938921071, 47.270392277320106]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"5\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.341089092363454, 47.26788791959754]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"6\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.339973293413259, 47.26742197950567]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"7\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.340659938921071, 47.26579115688413]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"8\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.3394583092824, 47.26497572673167]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"9\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.341292940248586, 47.26850673994096]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"10\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.340466819871999, 47.26860138241445]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"11\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.340606294740773, 47.26893626980793]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"12\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.345831237901784, 47.269067312124236]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"13\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.346078001131154, 47.2679243209945]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"14\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.345005117525197, 47.26766223037773]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"15\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.345080219377614, 47.267363736705796]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"16\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.350296400379627, 47.2614015487476]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"17\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.349523924183337, 47.26145979810764]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"18\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.347850225758044, 47.26769210933016]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"19\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.329654119801013, 47.265304114170355]),\n            {\n              \"landcover\": 3,\n              \"system:index\": \"20\"\n            })]),\n    water = /* color: #ffc82d */ee.FeatureCollection(\n        [ee.Feature(\n            ee.Geometry.Point([8.212081635037771, 47.28728575785449]),\n            {\n              \"landcover\": 4,\n              \"system:index\": \"0\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.218948090115896, 47.27890128277557]),\n            {\n              \"landcover\": 4,\n              \"system:index\": \"1\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.217574799100271, 47.2700495618668]),\n            {\n              \"landcover\": 4,\n              \"system:index\": \"2\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.644668304959646, 47.2625943326699]),\n            {\n              \"landcover\": 4,\n              \"system:index\": \"3\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.727065765897146, 47.22483612115463]),\n            {\n              \"landcover\": 4,\n              \"system:index\": \"4\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.621322357694021, 47.26445823840744]),\n            {\n              \"landcover\": 4,\n              \"system:index\": \"5\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.582870209256521, 47.29985997891254]),\n            {\n              \"landcover\": 4,\n              \"system:index\": \"6\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.558150970975271, 47.325464884814416]),\n            {\n              \"landcover\": 4,\n              \"system:index\": \"7\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.254653656522146, 47.211311206496354]),\n            {\n              \"landcover\": 4,\n              \"system:index\": \"8\"\n            }),\n        ee.Feature(\n            ee.Geometry.Point([8.258773529569021, 47.20571368095063]),\n            {\n              \"landcover\": 4,\n              \"system:index\": \"9\"\n            })]),\n    aoi = \n    /* color: #00ffff */\n    /* shown: false */\n    /* displayProperties: [\n      {\n        \"type\": \"rectangle\"\n      }\n    ] */\n    ee.Geometry.Polygon(\n        [[[7.986557722409096, 47.565286694437866],\n          [7.986557722409096, 46.845042087063305],\n          [9.398300886471596, 46.845042087063305],\n          [9.398300886471596, 47.565286694437866]]], null, false),\n    s2 = ee.ImageCollection(\"COPERNICUS/S2_SR_HARMONIZED\");\n/***** End of imports. If edited, may not auto-convert in the playground. *****/\n\n\n\n\n\n\nvar training = urban.merge(rural).merge(forest).merge(water);\n\nvar s2_filtered = s2.filterDate(\"2020-05-01\", \"2020-06-30\")\n  .filterBounds(aoi)\n  .filter(ee.Filter.lt(\"CLOUDY_PIXEL_PERCENTAGE\",20))\n  .median()\n\n//Map.addLayer(s2_filtered, {\"bands\": [\"B4\", \"B3\", \"B2\"]});\n\nvar bands = [\"B4\", \"B3\", \"B2\",\"B5\", \"B6\", \"B7\", \"B8\"]\nvar sampled = s2_filtered.select(bands).sampleRegions({\n  collection: training,\n  properties: [\"landcover\"],\n  scale: 30\n})\n\nprint(sampled)\n\nvar classifier = ee.Classifier.smileCart().train({features: sampled, classProperty: \"landcover\"})\n\nvar classified = s2_filtered.select(bands).classify(classifier)\n\nMap.addLayer(classified,{min: 1, max: 4, palette: [\"darkgreen\", \"lightgreen\", \"gray\", \"blue\"]})\n\n\nvar classified = filtered.select(bands).classify(classifier);\nprint(classified);\n\n/*\nMap.addLayer(filtered, {\"bands\":[\"B4\",\"B3\",\"B2\"]});\nMap.addLayer(forest, {color: \"darkgreen\"}, \"Forest\");\nMap.addLayer(water, {color: \"blue\"}, \"Water\");\nMap.addLayer(agriculture, {color: \"green\"}, \"Agriculture\");\n*/\nMap.addLayer(classified, {min: 1, max: 3, palette: \"darkgreen, blue, green\"}, \"Classified\");"
  }
]